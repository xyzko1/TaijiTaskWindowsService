//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace TaijiTaskClient.TaijiTaskServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TaskResult", Namespace="http://schemas.datacontract.org/2004/07/TaijiTaskWinService")]
    [System.SerializableAttribute()]
    public partial class TaskResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int intervalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> nextProcessTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool runOnStartField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> startTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string taskStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string timerTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int interval {
            get {
                return this.intervalField;
            }
            set {
                if ((this.intervalField.Equals(value) != true)) {
                    this.intervalField = value;
                    this.RaisePropertyChanged("interval");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> nextProcessTime {
            get {
                return this.nextProcessTimeField;
            }
            set {
                if ((this.nextProcessTimeField.Equals(value) != true)) {
                    this.nextProcessTimeField = value;
                    this.RaisePropertyChanged("nextProcessTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool runOnStart {
            get {
                return this.runOnStartField;
            }
            set {
                if ((this.runOnStartField.Equals(value) != true)) {
                    this.runOnStartField = value;
                    this.RaisePropertyChanged("runOnStart");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> startTime {
            get {
                return this.startTimeField;
            }
            set {
                if ((this.startTimeField.Equals(value) != true)) {
                    this.startTimeField = value;
                    this.RaisePropertyChanged("startTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string taskStatus {
            get {
                return this.taskStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.taskStatusField, value) != true)) {
                    this.taskStatusField = value;
                    this.RaisePropertyChanged("taskStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string timerType {
            get {
                return this.timerTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.timerTypeField, value) != true)) {
                    this.timerTypeField = value;
                    this.RaisePropertyChanged("timerType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TaijiTaskServiceReference.ITaskService")]
    public interface ITaskService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/GetTaskList", ReplyAction="http://tempuri.org/ITaskService/GetTaskListResponse")]
        TaijiTaskClient.TaijiTaskServiceReference.TaskResult[] GetTaskList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/GetTaskList", ReplyAction="http://tempuri.org/ITaskService/GetTaskListResponse")]
        System.Threading.Tasks.Task<TaijiTaskClient.TaijiTaskServiceReference.TaskResult[]> GetTaskListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/StartAll", ReplyAction="http://tempuri.org/ITaskService/StartAllResponse")]
        void StartAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/StartAll", ReplyAction="http://tempuri.org/ITaskService/StartAllResponse")]
        System.Threading.Tasks.Task StartAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/StopAll", ReplyAction="http://tempuri.org/ITaskService/StopAllResponse")]
        void StopAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/StopAll", ReplyAction="http://tempuri.org/ITaskService/StopAllResponse")]
        System.Threading.Tasks.Task StopAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/Start", ReplyAction="http://tempuri.org/ITaskService/StartResponse")]
        void Start(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/Start", ReplyAction="http://tempuri.org/ITaskService/StartResponse")]
        System.Threading.Tasks.Task StartAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/Stop", ReplyAction="http://tempuri.org/ITaskService/StopResponse")]
        void Stop(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/Stop", ReplyAction="http://tempuri.org/ITaskService/StopResponse")]
        System.Threading.Tasks.Task StopAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/RunImmediately", ReplyAction="http://tempuri.org/ITaskService/RunImmediatelyResponse")]
        void RunImmediately(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/RunImmediately", ReplyAction="http://tempuri.org/ITaskService/RunImmediatelyResponse")]
        System.Threading.Tasks.Task RunImmediatelyAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/Time", ReplyAction="http://tempuri.org/ITaskService/TimeResponse")]
        System.DateTime Time();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/Time", ReplyAction="http://tempuri.org/ITaskService/TimeResponse")]
        System.Threading.Tasks.Task<System.DateTime> TimeAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITaskServiceChannel : TaijiTaskClient.TaijiTaskServiceReference.ITaskService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TaskServiceClient : System.ServiceModel.ClientBase<TaijiTaskClient.TaijiTaskServiceReference.ITaskService>, TaijiTaskClient.TaijiTaskServiceReference.ITaskService {
        
        public TaskServiceClient() {
        }
        
        public TaskServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TaskServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TaskServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TaskServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public TaijiTaskClient.TaijiTaskServiceReference.TaskResult[] GetTaskList() {
            return base.Channel.GetTaskList();
        }
        
        public System.Threading.Tasks.Task<TaijiTaskClient.TaijiTaskServiceReference.TaskResult[]> GetTaskListAsync() {
            return base.Channel.GetTaskListAsync();
        }
        
        public void StartAll() {
            base.Channel.StartAll();
        }
        
        public System.Threading.Tasks.Task StartAllAsync() {
            return base.Channel.StartAllAsync();
        }
        
        public void StopAll() {
            base.Channel.StopAll();
        }
        
        public System.Threading.Tasks.Task StopAllAsync() {
            return base.Channel.StopAllAsync();
        }
        
        public void Start(System.Guid id) {
            base.Channel.Start(id);
        }
        
        public System.Threading.Tasks.Task StartAsync(System.Guid id) {
            return base.Channel.StartAsync(id);
        }
        
        public void Stop(System.Guid id) {
            base.Channel.Stop(id);
        }
        
        public System.Threading.Tasks.Task StopAsync(System.Guid id) {
            return base.Channel.StopAsync(id);
        }
        
        public void RunImmediately(System.Guid id) {
            base.Channel.RunImmediately(id);
        }
        
        public System.Threading.Tasks.Task RunImmediatelyAsync(System.Guid id) {
            return base.Channel.RunImmediatelyAsync(id);
        }
        
        public System.DateTime Time() {
            return base.Channel.Time();
        }
        
        public System.Threading.Tasks.Task<System.DateTime> TimeAsync() {
            return base.Channel.TimeAsync();
        }
    }
}
